/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder)
    {
        return buildTreeHelp(inorder, 0, inorder.size()-1, postorder, 0, postorder.size() -1);
    }

    TreeNode* buildTreeHelp(vector<int>& inorder, int inStart, int inEnd, vector<int> &postorder, int postStart, int postEnd)
    {
        if(postStart > postEnd || inStart > inEnd)
        {
            return nullptr;
        }

        TreeNode* root = new TreeNode(postorder[postEnd]);

        if(inStart == inEnd) 
        {
            return root;
        }

        int inRootIndex = findInorderIndex(inorder, inStart, inEnd, root->val);
        int leftSubtreeSize = inRootIndex - inStart;
        
        root->left = buildTreeHelp(inorder, inStart, inRootIndex - 1, postorder, postStart, postStart + leftSubtreeSize -1);
        root->right = buildTreeHelp(inorder, inRootIndex+1, inEnd, postorder, postStart + leftSubtreeSize, postEnd -1);

        return root;
    }
    int findInorderIndex(vector<int>& inorder, int start, int end, int value) {
        for (int i = start; i <= end; i++) {
            if (inorder[i] == value) {
                return i;
            }
        }
        return -1;
    }
};
