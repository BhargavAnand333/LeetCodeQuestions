/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return buildTreeHelp(preorder, 0, preorder.size()-1, inorder, 0, inorder.size() -1);
    }

    TreeNode* buildTreeHelp(vector<int>& preorder, int preStart, int preEnd, vector<int> &inorder, int inStart, int inEnd)
    {
        if(preStart > preEnd || inStart > inEnd)
        {
            return nullptr;
        }

        TreeNode* root = new TreeNode(preorder[preStart]);

        if(preStart == preEnd) 
        {
            return root;
        }

        int inRootIndex = findInorderIndex(inorder, inStart, inEnd, root->val);
        int leftSubtreeSize = inRootIndex - inStart;

        root->left = buildTreeHelp(preorder, preStart+1, preStart + leftSubtreeSize, inorder, inStart, inRootIndex-1);
        root->right = buildTreeHelp(preorder, preStart+leftSubtreeSize+1, preEnd, inorder, inRootIndex + 1, inEnd);

        return root;
    }
    int findInorderIndex(vector<int>& inorder, int start, int end, int value) {
        for (int i = start; i <= end; i++) {
            if (inorder[i] == value) {
                return i;
            }
        }
        return -1;
    }
};
