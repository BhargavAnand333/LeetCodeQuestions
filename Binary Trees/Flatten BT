EASY SOLUTION (but not optimal):

class Solution {
public:
    void flatten(TreeNode* root) {

        if(!root)
        {
            return;
        }

        std::stack<TreeNode*> stack;
        stack.push(root);

        while(!stack.empty())
        {
            TreeNode* current = stack.top();
            stack.pop();

            if(current->right)
            {
                stack.push(current->right);
            }

            if(current->left)
            {
                stack.push(current->left);
            }

            if(!stack.empty())
            {
                current->right = stack.top();
            }

            current->left = nullptr;
        }

    }
};

BETTER SOLUTION: Striver's first solution

class Solution {
public:
    TreeNode* prev = NULL;
    void flatten(TreeNode* root) {

        TreeNode* node = root;

        if(!root)
        {
            return;
        }

        flatten(node->right);
        flatten(node->left);

        node->right = prev;
        node->left = NULL;
        prev = node;

    }
};

BEST SOLUTION: Morris Traversal

class Solution {
public:
    void flatten(TreeNode* root) {
        TreeNode* cur = root;
        while(cur != NULL)
        {
            if(cur->left != NULL)
            {
                TreeNode* prev = cur->left;
                while(prev->right)
                {
                    prev = prev->right;
                }
                prev->right = cur->right;
                cur->right = cur->left;
                cur->left = nullptr;
            }
            cur = cur->right;
        }
    }
};


